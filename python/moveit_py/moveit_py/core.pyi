from typing import Any, List

from typing import overload
import numpy

class JointModelGroup:
    def __init__(self, *args, **kwargs) -> None: ...
    def get_joint_model_names(self) -> List[str]: ...
    def get_name(self) -> str: ...

class RobotModel:
    def __init__(self, urdf_model, srdf_model) -> None: ...
    def get_joint_model_group(self, joint_model_group_name: str) -> JointModelGroup: ...
    def get_joint_model_group_names(self) -> List[str]: ...
    def get_joint_model_groups(self) -> List[JointModelGroup]: ...
    def get_model_frame(self) -> str: ...
    def get_name(self) -> str: ...
    def get_root_joint(self, *args, **kwargs) -> Any: ...
    def get_root_joint_name(self) -> str: ...
    def get_srdf(self, *args, **kwargs) -> Any: ...
    def get_urdf(self, *args, **kwargs) -> Any: ...
    def has_joint_model_group(self, joint_model_group_name: str) -> bool: ...
    def printModelInfo(self) -> str: ...

class RobotState:
    def __init__(self, arg0: RobotModel) -> None: ...
    def copy_joint_group_accelerations(self, joint_group_name: str) -> numpy.ndarray[numpy.float64[m,1]]: ...
    def copy_joint_group_positions(self, joint_group_name: str) -> numpy.ndarray[numpy.float64[m,1]]: ...
    def copy_joint_group_velocities(self, joint_group_name: str) -> numpy.ndarray[numpy.float64[m,1]]: ...
    def get_frame_transform(self, frame_id: str) -> numpy.ndarray[numpy.float64[m,n]]: ...
    @overload
    def get_jacobian(self, joint_group_name: str, reference_point_position: numpy.ndarray[numpy.float64[3,1]]) -> numpy.ndarray[numpy.float64[m,n]]: ...
    @overload
    def get_jacobian(self, joint_model_group_name: str, link_name: str, reference_point_position: numpy.ndarray[numpy.float64[3,1]], use_quaternion_representation: bool = ...) -> numpy.ndarray[numpy.float64[m,n]]: ...
    def get_robot_model(self) -> RobotModel: ...
    def get_state_tree(self) -> str: ...
    def print_state_info(self) -> str: ...
    def set_joint_group_accelerations(self, joint_group_name: str, acceleration_values: numpy.ndarray[numpy.float64[m,1]]) -> None: ...
    def set_joint_group_active_positions(self, joint_group_name: str, position_values: numpy.ndarray[numpy.float64[m,1]]) -> None: ...
    def set_joint_group_positions(self, joint_group_name: str, position_values: numpy.ndarray[numpy.float64[m,1]]) -> None: ...
    def set_joint_group_velocities(self, joint_group_name: str, velocity_values: numpy.ndarray[numpy.float64[m,1]]) -> None: ...
    @overload
    def set_to_default_values(self) -> None: ...
    @overload
    def set_to_default_values(self, joint_model_group: JointModelGroup, name: str) -> bool: ...
    @overload
    def set_to_default_values(self, joint_model_group_name: str, name: str) -> bool: ...
    @overload
    def set_to_random_positions(self) -> None: ...
    @overload
    def set_to_random_positions(self, joint_model_group: JointModelGroup) -> None: ...
