from typing import Any, Dict, List

from typing import overload
import moveit_py.core

class MoveItPy:
    def __init__(self, node_name: str = ..., launch_params_filepath: str = ..., provide_planning_service: bool = ...) -> None: ...
    @overload
    def get_current_state(self, current_state: moveit_py.core.RobotState, wait_seconds: float = ...) -> bool: ...
    @overload
    def get_current_state(self, wait_seconds: float = ...) -> moveit_py.core.RobotState: ...
    def get_planning_component(self, arg0: str) -> PlanningComponent: ...
    def get_planning_pipeline_names(self, arg0: str) -> Set[str]: ...
    def get_planning_scene_monitor(self) -> PlanningSceneMonitor: ...
    def get_raw_address(self) -> int: ...
    def get_robot_model(self) -> moveit_py.core.RobotModel: ...
    def shutdown(self) -> None: ...

class PlanSolution:
    error_code: Any
    start_state: Any
    trajectory: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __bool__(self) -> bool: ...

class PlanningComponent:
    def __init__(self, group_name: str, moveit_cpp) -> None: ...
    def execute(self, blocking: bool = ...) -> bool: ...
    def get_named_target_state(self) -> List[str]: ...
    def get_named_target_state_values(self, arg0: str) -> Dict[str,float]: ...
    def get_planning_group_name(self) -> str: ...
    def get_raw_address(self) -> int: ...
    def get_start_state(self) -> moveit_py.core.RobotState: ...
    def plan(self) -> PlanSolution: ...
    @overload
    def set_goal(self, goal_pose: object, link_name: str) -> bool: ...
    @overload
    def set_goal(self, goal_state_name: str) -> bool: ...
    @overload
    def set_goal(self, goal_state: moveit_py.core.RobotState) -> bool: ...
    @overload
    def set_start_state(self, start_state_name: str) -> bool: ...
    @overload
    def set_start_state(self, start_state: moveit_py.core.RobotState) -> bool: ...
    def set_start_state_to_current_state(self) -> None: ...
    def set_workspace(self, min_x: float, min_y: float, min_z: float, max_x: float, max_y: float, max_z: float) -> None: ...
    def unset_workspace(self) -> None: ...

class PlanningSceneMonitor:
    def __init__(self, *args, **kwargs) -> None: ...
    @property
    def name(self) -> str: ...
