from typing import Any

class AllowedCollisionMatrix:
    def __init__(self, *args, **kwargs) -> None: ...

class CollisionRequest:
    contacts: Any
    cost: Any
    distance: Any
    joint_model_group_name: Any
    max_contacts: Any
    max_contacts_per_pair: Any
    max_cost_sources: Any
    verbose: Any
    def __init__(self, *args, **kwargs) -> None: ...

class CollisionResult:
    collision: Any
    contact_count: Any
    contacts: Any
    cost_sources: Any
    distance: Any
    def __init__(self, *args, **kwargs) -> None: ...

class JointModelGroup:
    def __init__(self, *args, **kwargs) -> None: ...
    @property
    def joint_model_names(self) -> Any: ...
    @property
    def name(self) -> Any: ...

class PlanningScene:
    current_state: Any
    name: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def apply_attached_collision_object(self, *args, **kwargs) -> Any: ...
    def apply_collision_object(self, *args, **kwargs) -> Any: ...
    def apply_octomap(self, *args, **kwargs) -> Any: ...
    def apply_planning_scene_world(self, *args, **kwargs) -> Any: ...
    def check_collision(self, *args, **kwargs) -> Any: ...
    def check_collision_unpadded(self, *args, **kwargs) -> Any: ...
    def check_self_collision(self, *args, **kwargs) -> Any: ...
    def get_frame_transform(self, *args, **kwargs) -> Any: ...
    def is_path_valid(self, *args, **kwargs) -> Any: ...
    def is_state_colliding(self, *args, **kwargs) -> Any: ...
    def is_state_constrained(self, *args, **kwargs) -> Any: ...
    def knows_frame_transform(self, *args, **kwargs) -> Any: ...
    def remove_all_collision_objects(self, *args, **kwargs) -> Any: ...
    @property
    def planning_frame(self) -> Any: ...
    @property
    def planning_scene_message(self) -> Any: ...
    @property
    def robot_model(self) -> Any: ...

class RobotModel:
    def __init__(self, *args, **kwargs) -> None: ...
    def get_joint_model_group(self, *args, **kwargs) -> Any: ...
    def get_model_info(self, *args, **kwargs) -> Any: ...
    def has_joint_model_group(self, *args, **kwargs) -> Any: ...
    @property
    def joint_model_group_names(self) -> Any: ...
    @property
    def joint_model_groups(self) -> Any: ...
    @property
    def model_frame(self) -> Any: ...
    @property
    def name(self) -> Any: ...
    @property
    def root_joint_name(self) -> Any: ...

class RobotState:
    def __init__(self, *args, **kwargs) -> None: ...
    def clear_attached_bodies(self, *args, **kwargs) -> Any: ...
    def get_frame_transform(self, *args, **kwargs) -> Any: ...
    def get_global_link_transform(self, *args, **kwargs) -> Any: ...
    def get_jacobian(self, *args, **kwargs) -> Any: ...
    def get_joint_group_accelerations(self, *args, **kwargs) -> Any: ...
    def get_joint_group_positions(self, *args, **kwargs) -> Any: ...
    def get_joint_group_velocities(self, *args, **kwargs) -> Any: ...
    def get_pose(self, *args, **kwargs) -> Any: ...
    def get_state_info(self, *args, **kwargs) -> Any: ...
    def set_from_ik(self, *args, **kwargs) -> Any: ...
    def set_joint_group_accelerations(self, *args, **kwargs) -> Any: ...
    def set_joint_group_active_positions(self, *args, **kwargs) -> Any: ...
    def set_joint_group_positions(self, *args, **kwargs) -> Any: ...
    def set_joint_group_velocities(self, *args, **kwargs) -> Any: ...
    def set_to_default_values(self, *args, **kwargs) -> Any: ...
    def set_to_random_positions(self, *args, **kwargs) -> Any: ...
    def update(self, *args, **kwargs) -> Any: ...
    @property
    def dirty(self) -> Any: ...
    @property
    def robot_model(self) -> Any: ...
    @property
    def state_tree(self) -> Any: ...

class RobotTrajectory:
    joint_model_group_name: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def get_waypoint_durations(self, *args, **kwargs) -> Any: ...
    def unwind(self, *args, **kwargs) -> Any: ...
    def __getitem__(self, index) -> Any: ...
    def __len__(self) -> Any: ...
    def __reverse__(self, *args, **kwargs) -> Any: ...
    @property
    def average_segment_duration(self) -> Any: ...
    @property
    def duration(self) -> Any: ...
    @property
    def robot_model(self) -> Any: ...
